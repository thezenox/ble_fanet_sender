***********************************************
GLIDER ANTI-COLLISION RADIO PROTOCOL VERSION 7 (2021) 
***********************************************

courtesy of unknown

Document Release: 0.1 / 2021-11-19 / DRAFT

See also documents from 2008 and 2015.



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
The information in this document has not been verified, use at your own risk
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



*********
FREQUENCY
*********

Depending on the transceiver location, different frequency bands are used.

Geographic zones:

- Zone 1: Europe, Africa, Russia, China (30W to 110E, excl. zone 5)
- Zone 2: North America (west of 30W, north of 10N)
- Zone 3: New Zealand (east of 160E)
- Zone 4: Australia (110E to 160E)
- Zone 5: Israel (34E to 54E and 29.25N to 33.5N)
- Zone 6: South America (west of 30W, south of 10N)

Zones define a base frequency f0 and a number nch of 400kHz channels for freq. hopping, 
or two frequencies f0, f1.

- Zone 1: f0=868.2, f1=868.4
- Zone 2, 3, 5, 6: f0=902.2, nch=65
- Zone 4: f0=917.0, nch=24

A pseudo random number generator is used to calculate the channel for a given timestamp.

uint32_t calculate_freq_channel(uint32_t timestamp, uint32_t nch) {
    uint32_t nts = ~timestamp;
    uint32_t ts16 = timestamp * 32768 + nts;
    uint32_t v4096 = (ts16 >> 12) ^ ts16;
    uint32_t v5 = 5 * v4096;
    uint32_t v16 = (v5 >> 4) ^ v5;
    uint32_t v2057 = 2057 * v16;
    uint32_t v9 = (v2057 >> 16) ^ v2057;
    return v9 % nch;
}


*************
PACKET FORMAT
*************

For the packet structure and XXTEA encoding algorithm, please see version 6 of this document.

Byte     Bits
 0     AAAA AAAA    device address
 1     AAAA AAAA
 2     AAAA AAAA
 3     00aa 0000    aa = 10 or 01
 
 4     vvvv vvvv    vertical speed (dm/s)
 5     0yzq qqvv    y=notrack z=priv, q=turn rate *)
 6     hhgg gggg    min(62, gps vacc m)
 7     tttt hhhh    plane type, min(62, gps hacc m)
 
 8     LLLL LLLL    Latitude
 9     LLLL LLLL
10     aaaa aLLL
11     aaaa aaaa    Altitude
 
12     NNNN NNNN    Longitude
13     NNNN NNNN
14     0000 NNNN
15     FF00 0000    multiplying factor
 
16     SSSS SSSS    vel_n[0] **)
17     ssss ssss    vel_n[1]
18     KKKK KKKK    vel_n[2]
19     kkkk kkkk    vel_n[3]
 
20     EEEE EEEE    vel_e[0]
21     eeee eeee    vel_e[0]
22     PPPP PPPP    vel_e[0]
24     pppp pppp    vel_e[0]

*)  1 (plane on ground), 5 (no/slow turn), 4 (right turn >14deg), 7 (left turn >14deg)
**) extrapolated velocity vector components for 4s intervals, meters in 4 seconds

To generate the packet, the code below can be used.

After setting the configuration data, call the following function to initialize the 
aircraft state:
void init_aircraft_state(AircraftState *aircraft);

Update the GPS data once per second, then call these functions to run the calculations
and to generate the packet:
void update_aircraft_state(AircraftState *aircraft);
void create_packet(AircraftState *aircraft, uint8_t *packet);

Before transmission, the packet is encrypted with the XXTEA algorithm as explained in 
the 2015 version of this document.

Data structures:

typedef struct {
    uint8_t identifier[3];
    int type; // 1=Glider, ...
    int thre_m_per_sec; // typ. 2m/s
    int no_tracking_mode; // 0=off
    int private_mode; // 0=off
    int airborne_mode; // 0=calc, 1=onGround, 2=inAir
} AircraftConfig;

typedef struct {
    int32_t lat_deg_e7; // Latitude
    int32_t lon_deg_e7; // Longitude
    int32_t height_m; // Height above Ellipsoid
    uint32_t hacc_cm; // Horizontal Accuracy Estimate
    uint32_t vacc_cm; // Vertical Accuracy Estimate
    int32_t vel_n_cm_s; // NED north velocity
    int32_t vel_e_cm_s; // NED east velocity
    int32_t vel_u_cm_s; // NED up! velocity
    uint32_t gspeed_cm_s; // Ground Speed (2-D)
    int32_t heading_deg_e1; // Heading 2-D
    uint32_t sacc_cm_s; // Speed Accuracy Estimate
    uint32_t cacc_deg_e1; // Course / Heading Accuracy Estimate
} GpsData;

typedef struct {
    AircraftConfig *config;
    GpsData *gps;
    int turn_state; // 1=onGround, 5=no, 4=rightTurn, 7=leftTurn
    int is_airborne; // 0=onGround, 1=airborne
    int32_t extrapolated_lat_deg_e7;
    int32_t extrapolated_lon_deg_e7;
    int32_t extrapolated_heading_deg_e1;
    uint32_t extrapolated_height_m; // 0 instead of negative
    int32_t heading_deg_e1;
    int32_t delta_heading_deg_e1;
    int32_t filtered_delta_heading_deg_e1;
    int32_t vel_u_filtered_cm_s; // up
    uint32_t gspeed_filtered_cm_s;
    int airborne_ctr; // -2..0..10
    int old_is_airborne;
    int32_t old_heading_deg_e1;
    int speed_scaling; // 0,1,2,3
    uint8_t hacc_m; // 0..62
    uint8_t vacc_m; // 0..62
    // extrapolated 4s time slots 2-5s, 6-9s, ...
    uint8_t extrapolated_avg_vel_n[4];
    uint8_t extrapolated_avg_vel_e[4];
} AircraftState;

Functions:

void init_aircraft_state(AircraftState *aircraft) {
    aircraft->turn_state = 1;
    aircraft->is_airborne = 0;
    aircraft->extrapolated_lat_deg_e7 = 0;
    aircraft->extrapolated_lon_deg_e7 = 0;
    aircraft->extrapolated_heading_deg_e1 = 0;
    aircraft->extrapolated_height_m = 0;
    aircraft->heading_deg_e1 = 0;
    aircraft->delta_heading_deg_e1 = 0;
    aircraft->filtered_delta_heading_deg_e1 = 0;
    aircraft->vel_u_filtered_cm_s = 0;
    aircraft->gspeed_filtered_cm_s = 0;
    aircraft->airborne_ctr = 0;
    aircraft->old_heading_deg_e1 = 0;
    aircraft->speed_scaling = 0;
    aircraft->hacc_m = 0;
    aircraft->vacc_m = 0;
    for (int i = 0; i < 4; i++) {
        aircraft->extrapolated_avg_vel_n[i] = 0;
        aircraft->extrapolated_avg_vel_e[i] = 0;
    }
}

void update_aircraft_state(AircraftState *aircraft) {
    update_position_speed_direction(aircraft);
    update_airborne(aircraft);
    update_turn_state(aircraft);    
    calculate_speed_scaling(aircraft);
    update_height(aircraft);
    update_accuracy(aircraft);
    extrapolate_velocity_vector(aircraft);
}

void create_packet(AircraftState *aircraft, uint8_t *packet) {
    uint32_t lat0 = *(uint32_t*)&aircraft->extrapolated_lat_deg_e7;
    uint32_t lat128 = lat0 >> 7;
    if (lat0 & 0x40) {
        lat128 += 1;
    }
    lat128 &= 0x7ffff;
    
    uint32_t lon0 = *(uint32_t*)&aircraft->extrapolated_lon_deg_e7;
    uint32_t lon128 = lon0 >> 7;
    if (lon0 & 0x40) {
        lon128 += 1;
    }
    lon128 &= 0xfffff;

    // Fill bytes 0 to 23 of the packet with data.
    packet[0] = aircraft->config->identifier[0];
    packet[1] = aircraft->config->identifier[1];
    packet[2] = aircraft->config->identifier[2];
    packet[3] = 0x20;
    // Scale the vertical speed; scaled result can be in the range -512..511.
    // 511 corresponds to 51.1m/s (scaling=0) ... 408.8m/s (scaling=3).
    int velUScaled = aircraft->gps->vel_u_cm_s / 10;
    for (int i = 0; i < aircraft->speed_scaling; i++) {
        velUScaled /= 2;
    }
    packet[4] = (uint8_t)(velUScaled & 0xff);
    packet[5] = (aircraft->config->no_tracking_mode ? 0x40 : 0x00)
            | (aircraft->config->private_mode ? 0x20 : 0x00)
            | (aircraft->turn_state << 2)
            | ((velUScaled >> 8) & 0x03);
    // Horizontal and vertical accuracy are cropped at 62m.
    packet[6] = ((aircraft->vacc_m & 0x03) << 6) | aircraft->hacc_m;
    packet[7] = (aircraft->config->type << 4) | (aircraft->vacc_m >> 2);
    packet[8] = (uint8_t)(lat128 & 0xff);
    packet[9] = (uint8_t)((lat128 >> 8) & 0xff);
    uint32_t h = aircraft->extrapolated_height_m;
    if (h >= 8192){
        h = 0x1fff;
    }
    packet[10] = (uint8_t)((h & 0x1f) << 3)
            | (uint8_t)((lat128 >> 16) & 0x07);
    packet[11] = (uint8_t)(h >> 5);
    packet[12] = (uint8_t)(lon128 & 0xff);
    packet[13] = (uint8_t)((lon128 >> 8) & 0xff);
    packet[14] = (uint8_t)((lon128 >> 16) & 0x0f);
    packet[15] = (uint8_t)(aircraft->speed_scaling << 6);
    for (int i = 0; i < 4; i++) {
        packet[16 + i] = aircraft->extrapolated_avg_vel_n[i];
        packet[20 + i] = aircraft->extrapolated_avg_vel_e[i];
    }
}

void update_position_speed_direction(AircraftState *aircraft) {
    // Extrapolate the lattitude.
    float lat = (float)aircraft->gps->lat_deg_e7;
    float latRad = lat / 1e7 / 180.0 * M_PI;
    float cosLat = cosf(latRad);
    float absCosLat = fabsf(cosLat);
    float dLat = (float)aircraft->gps->vel_n_cm_s * 1.8; // cm/s to km/h*50
    float newLat = lat + dLat;
    aircraft->extrapolated_lat_deg_e7 = (int32_t)floorf(newLat);
    
    // Extrapolate the longitude.
    float lon = (float)aircraft->gps->lon_deg_e7;
    float velE = (float)aircraft->gps->vel_e_cm_s;
    float dLon = (velE * 1.8) / absCosLat;
    aircraft->extrapolated_lon_deg_e7 = (int32_t)floorf(lon + dLon);

    // Heading
    if (aircraft->gps->gspeed_cm_s >= 101
        && aircraft->gps->cacc_deg_e1 < 300) {
        aircraft->heading_deg_e1 = aircraft->gps->heading_deg_e1;
    }
    
    // Ground speed, low-pass filtered
    uint32_t prevGspeed = aircraft->gspeed_filtered_cm_s;
    uint32_t curGspeed = aircraft->gps->gspeed_cm_s;
    uint32_t newGspeed = (7 * prevGspeed + curGspeed) / 8;
    aircraft->gspeed_filtered_cm_s = newGspeed;

    // Vertical speed, low-pass filtered
    int32_t prevVelU = aircraft->vel_u_filtered_cm_s;
    int32_t curVelU = aircraft->gps->vel_u_cm_s;
    int32_t newVelU = (7 * prevVelU + curVelU) / 8;
    aircraft->vel_u_filtered_cm_s = newVelU;
    
    // Heading difference
    int32_t prevHeading = aircraft->old_heading_deg_e1;
    int32_t curHeading = aircraft->heading_deg_e1;
    int32_t deltaHeading = curHeading - prevHeading;
    if (deltaHeading >= 1801) {
        deltaHeading -= 3600;
    } else if (deltaHeading < -1799) {
        deltaHeading += 3600;
    }
    aircraft->delta_heading_deg_e1 = deltaHeading;
    
    // Only update the filtered heading difference if the current heading
    // difference is 50 degrees or less, otherwise use the filtered value
    // as current heading difference.
    int32_t absDeltaHeading = abs(deltaHeading);
    if (absDeltaHeading >= 501) {
        aircraft->delta_heading_deg_e1 = aircraft->filtered_delta_heading_deg_e1;
    } else {
        aircraft->filtered_delta_heading_deg_e1 =
            (7 * aircraft->filtered_delta_heading_deg_e1 + aircraft->delta_heading_deg_e1) / 8;
    }
    
    // Remember the current heading for the next iteration.
    aircraft->old_heading_deg_e1 = aircraft->heading_deg_e1;
    
    int32_t curDeltaHeading = aircraft->delta_heading_deg_e1;
    int32_t extrapolatedHeading = aircraft->gps->heading_deg_e1 + curDeltaHeading;
    if (extrapolatedHeading > 3600) {
        extrapolatedHeading -= 3600;
    }
    aircraft->extrapolated_heading_deg_e1 = extrapolatedHeading;
}

void update_airborne(AircraftState *aircraft) {
    int airborneMode = aircraft->config->airborne_mode;
    if (airborneMode < 0 || airborneMode > 2) {
        return;
    }
    if (airborneMode == 2) {
        aircraft->is_airborne = 1;
        return;
    }
    if (airborneMode == 1) {
        aircraft->is_airborne = 0;
        return;
    }
    
    int configThres = aircraft->config->thre_m_per_sec;
    int speedThresholdCmPerSec = aircraft->gps->sacc_cm_s + 100 * configThres;
    
    // Fast aircraft, or config threshold 0; set is_airborne after a while.
    if (configThres == 0
        || aircraft->gps->gspeed_cm_s >= speedThresholdCmPerSec
        || abs(aircraft->gps->vel_u_cm_s) >= 2 * speedThresholdCmPerSec) {
        
        // Fast or no threshold configured; set isAirborne after a while.
        if (aircraft->airborne_ctr < 0) {
            aircraft->airborne_ctr++;
        } else {
            aircraft->airborne_ctr = 10;
            aircraft->is_airborne = 1;
        }
        return;
    }
    
    // Slow aircraft, config threshold not 0; clear is_airborne after a while.
    if (aircraft->airborne_ctr > 0) {
        aircraft->airborne_ctr--;
    } else {
        aircraft->airborne_ctr = -2;
        aircraft->is_airborne = 0;
    }
}

void update_turn_state(AircraftState *aircraft) {
    if (!aircraft->is_airborne) {
        aircraft->turn_state = 1;
        return;
    }
    // No turn if this is not a glider or if moving faster than 36m/s.
    if (aircraft->config->type != 1 || aircraft->gspeed_filtered_cm_s > 3600) {
        aircraft->turn_state = 5;
        return;
    }
    // The aircraft is a glider, check if it's making a turn of 14 degrees or more.
    int dh = aircraft->delta_heading_deg_e1;
    if (dh > -140 && dh < 140) {
        aircraft->turn_state = 5;
        return;
    }
    // 4 for right turn, 7 for left turn
    aircraft->turn_state = dh < 0 ? 7 : 4;
}

void calculate_speed_scaling(AircraftState *aircraft) {
    int velU = aircraft->gps->vel_u_cm_s; // abs?
    int gspeed = aircraft->gps->gspeed_cm_s;
    if (velU < 2400 && gspeed < 3000) {
        // < 86.4 km/h, < 108 km/h
        aircraft->speed_scaling = 0;
    } else if (velU < 4800 && gspeed < 6200) {
        // < 172.8 km/h, < 223.2 km/h
        aircraft->speed_scaling = 1;
    } else if (velU < 10000 && gspeed < 12400) {
        // < 360.0 km/h, < 446.4 km/h
        aircraft->speed_scaling = 2;
    } else {
        aircraft->speed_scaling = 3;
    }
}

void update_height(AircraftState *aircraft) {
    int32_t velU = aircraft->gps->vel_u_cm_s;
    int32_t deltaHeight = velU / 50; // m/2s
    int32_t height = aircraft->gps->height_m;
    int32_t newHeight = height + deltaHeight;
    if (newHeight < 0) {
        newHeight = 0;
    }
    aircraft->extrapolated_height_m = (uint32_t)newHeight;
}

void update_accuracy(AircraftState *aircraft) {
    int hacc = aircraft->gps->hacc_cm / 100;
    aircraft->hacc_m = min(62, hacc);
    int vacc = aircraft->gps->vacc_cm / 100;
    aircraft->vacc_m = min(62, vacc);
}

// Intermediate extrapolated velocity vectors.
#define VEL_XPL_CNT 18
int16_t vel_e_i[VEL_XPL_CNT];
int16_t vel_n_i[VEL_XPL_CNT];

void extrapolate_velocity_vector(AircraftState *aircraft) {
    int32_t deltaHeading = aircraft->delta_heading_deg_e1;
    
    // Convert delta heading from decidegrees to radian.
    float deltaHeadingRad = (float)deltaHeading / 10 / 180 * M_PI;
    float dhSin = sin(deltaHeadingRad);
    float dhCos = cos(deltaHeadingRad);
    
    // Initial velocity vector.
    float curVelN = (float)aircraft->gps->vel_n_cm_s;
    float curVelE = (float)aircraft->gps->vel_e_cm_s;

    // Extrapolate future velocity vectors by applying the delta heading.
    for (int i = 0; i < VEL_XPL_CNT; i++) {
        
        // Rotate curVel by delta heading to get newVel.
        float newVelN = curVelN * dhCos - curVelE * dhSin;
        float newVelE = curVelN * dhSin + curVelE * dhCos;

        // Store newVel in the corresponding slot.
        vel_n_i[i] = (int16_t)newVelN;
        vel_e_i[i] = (int16_t)newVelE;

        // Use newVel as start vector for the next iteration.
        curVelN = newVelN;
        curVelE = newVelE;
    }
    
    // Average the extrapolated velocity vectors to get 4 vectors at t=2-5s, t=6-9s, ...
    int ix = 1; // 1 to skip t=1s and start at t=2s
    for (int i = 0; i < 4; i++) {
        
        // Average over groups of 4 extrapolated velocity vectors.
        int avgVelN = 0;
        int avgVelE = 0;
        for (int j = 0; j < 4; j++) {
            avgVelN += vel_n_i[ix] / 2; // summing 4x cm/s gives cm/4s, /2
            avgVelE += vel_e_i[ix] / 2;
            ix++;
        }
        
        // Scale and store averages for transmission in co-operation message.
        avgVelN /= 50; // from cm/4s/2 to m/4s
        avgVelE /= 50;
        for (int j = 0; j < aircraft->speed_scaling; j++) {
            avgVelN /= 2;
            avgVelE /= 2;
        }
        aircraft->extrapolated_avg_vel_n[i] = (uint8_t)avgVelN;
        aircraft->extrapolated_avg_vel_e[i] = (uint8_t)avgVelE;
    }
}
